package whu.edu.moniData.tests;

import org.json.JSONArray;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

public class PointsToGeoJSON {

    public static void main(String[] args) {
        // 原始数据输入 - 这里直接包含点数据

        String pointsData = "[(114.05977504376796,30.9814071395634,4,2,118.27), (114.06000029075655,30.982742226374704,4,2,115.01), (114.06016027206257,30.983993314236578,4,2,102.62), (114.06026287072442,30.98511384837675,4,2,93.88), (114.06033515461846,30.986299289744363,4,2,118.67), (114.0603934242564,30.98764734506414,4,2,116.21), (114.0604516955411,30.988995400357762,4,2,119.0), (114.06050880299789,30.99031649452015,4,2,101.43), (114.06055658800376,30.991421899820377,4,2,91.14), (114.06060436657054,30.992401245874735,4,2,89.7), (114.06067384498708,30.993298591867756,4,2,81.92), (114.06074818834058,30.994258752039098,4,2,83.4), (114.06084592939703,30.995307549184513,4,2,97.11), (114.06095164332561,30.996211254606326,4,2,88.61), (114.06109903481821,30.99730112670391,4,2,101.28), (114.06128505741123,30.998558963409966,4,2,114.64), (114.06151171622672,30.999875701159077,4,2,120.0), (114.06176585772177,31.001206825564054,4,2,109.73), (114.06205061798869,31.002533486619313,4,2,120.0), (114.06235480870956,31.003857029781205,4,2,120.0), (114.06265900787614,31.005180572230046,4,2,112.69), (114.06290845749542,31.006265876505992,4,2,85.02), (114.06311126624986,31.007148237352542,4,2,83.05), (114.06331407875871,31.00803059788211,4,2,80.0), (114.06351163723961,31.008913797038193,4,2,80.94), (114.06369288360371,31.009799599275517,4,2,82.2), (114.06384809048453,31.01068896022189,4,2,88.42), (114.06400469935018,31.01162365836081,4,2,90.08), (114.06416426027349,31.01273945723557,4,2,90.12), (114.06426713225363,31.01367051538229,4,2,83.99), (114.06435633442086,31.01458459408054,4,2,84.19), (114.06444665028931,31.015706076555325,4,2,91.76), (114.06452685256245,31.016701952940238,4,2,80.0), (114.06459870396633,31.017599162387864,4,2,81.47), (114.06468352233443,31.018684909496802,4,2,97.71), (114.06476203362098,31.019689898506893,4,2,85.57), (114.06483700662041,31.02062297766764,4,2,84.09), (114.06491240343209,31.02152898515202,4,2,90.62), (114.06498900558812,31.02250704380807,4,2,85.22), (114.06505928417886,31.023404345287613,4,2,83.68), (114.06514221461869,31.02446316098448,4,2,99.64), (114.06522796989314,31.02557589402487,4,2,81.78), (114.06529674556458,31.02647328114619,4,2,86.82), (114.0653779025236,31.027532197902435,4,2,97.49), (114.0654638758467,31.028653931699004,4,2,97.76), (114.06555081085453,31.029739552150318,4,2,91.38), (114.06564180423193,31.030779839160466,4,2,97.23), (114.0657608793807,31.03207985570596,4,2,108.4), (114.06591739193465,31.033412944335105,4,2,111.31), (114.0660930609151,31.034753500592977,4,2,112.25), (114.0662858516745,31.035938033390156,4,2,101.39), (114.06646458481167,31.036988122760913,4,2,100.81), (114.06668187441304,31.03806925449797,4,2,88.74), (114.06686918603971,31.038954138257267,4,2,88.74), (114.0670724190667,31.03990049278882,4,2,89.23), (114.06730796061727,31.040859752721413,4,2,100.49), (114.06763277759094,31.042106085915407,4,2,107.57), (114.0678933269374,31.043032843397533,4,2,86.67), (114.06814688137187,31.043905501568098,4,2,80.0), (114.06841213795117,31.044775632840462,4,2,82.99), (114.06867739938008,31.045645763570235,4,2,82.19), (114.06898245601892,31.046646413238637,4,2,94.61), (114.06927425532767,31.047603555728177,4,2,82.53), (114.06957940635752,31.048613477702226,4,2,99.07), (114.06990788889375,31.04970183309423,4,2,96.61), (114.07028368212912,31.050946910642118,4,2,119.51), (114.07065259768025,31.052165645529836,4,2,107.08), (114.07098203030546,31.05325379285996,4,2,91.56), (114.07130092826334,31.054307118678217,4,2,88.77), (114.07159347722738,31.055273392086125,4,2,87.57), (114.07190975306192,31.056318011243974,4,2,90.97), (114.07223921444138,31.057406155379613,4,2,93.66), (114.07255079329049,31.058433238024175,4,2,94.14), (114.07287301910789,31.059495118914498,4,2,92.54), (114.07320317597201,31.060583110799282,4,2,105.55), (114.0734963615981,31.06154924688811,4,2,96.85), (114.07382653272113,31.062637237185307,4,2,92.93), (114.07415142847896,31.06370781881688,4,2,109.37),(114.07454757693543,31.065013421745835,4,2,109.42), (114.07493503134233,31.066320938977345,4,2,120.0), (114.07532249640273,31.067628455050684,4,2,116.3), (114.0756815568697,31.068840085578042,4,2,92.21), (114.07595731207786,31.069800625878543,4,2,87.55), (114.07618090252683,31.070679318001936,4,2,83.21), (114.07639637546366,31.07157773217501,4,2,92.01), (114.07662958320094,31.07268399412828,4,2,98.46), (114.07681498374335,31.073732927179957,4,2,86.96), (114.076961393076,31.074696064029343,4,2,89.04), (114.07706938316541,31.075626696597272,4,2,80.93), (114.07716767156947,31.076522068282056,4,2,80.0), (114.07722411129888,31.077564039285775,4,2,91.82), (114.07725430168338,31.078471984742016,4,2,80.0),(114.07728002122442,31.079370950643014,4,2,81.69), (114.077256009793,31.08027003585326,4,2,82.95), (114.07723199790736,31.08116912105904,4,2,87.79), (114.07717874442547,31.082067260149262,4,2,82.66), (114.07707082658834,31.083115397976805,4,2,93.92), (114.07694592174538,31.08418009321119,4,2,84.73), (114.07681919810331,31.085072841238908,4,2,80.0), (114.07666761272688,31.08596268903745,4,2,87.76), (114.07651336262883,31.086861345595448,4,2,90.37), (114.07631677666615,31.087990998380764,4,2,109.62), (114.07610745324601,31.08913718878827,4,2,105.33), (114.07589812477589,31.090283378857592,4,2,109.35), (114.07567905468969,31.091482879730773,4,2,106.28), (114.07545461694235,31.092718071802672,4,2,113.7), (114.0752124545446,31.094051018216053,4,2,118.08), (114.0749945025765,31.09525066960108,4,2,107.76), (114.07478623221934,31.096397002804196,4,2,99.51), (114.07459733150192,31.09743670007095,4,2,91.19), (114.07442295793861,31.098396420380386,4,2,89.61), (114.0742259761564,31.09948054859578,4,2,98.78), (114.07402576055668,31.100582449097907,4,2,91.81), (114.07386429297944,31.101471078309707,4,2,80.52), (114.07367214262524,31.10252854680948,4,2,107.59), (114.07344446313725,31.10378151331841,4,2,120.0), (114.0732022443205,31.1051144559737,4,2,112.88), (114.07297762860462,31.106431462255085,4,2,108.69), (114.0727997863063,31.10772644801197,4,2,108.49), (114.07266164468689,31.108943791432782,4,2,116.73), (114.0725559028908,31.110199358399576,4,2,96.21), (114.07249948311437,31.1111694151988,4,2,87.93), (114.07246275446946,31.112104156317937,4,2,86.49), (114.07245090972675,31.113165233979704,4,2,88.84), (114.0724645280649,31.11406446793842,4,2,80.0), (114.07249553273986,31.11496333099772,4,2,83.76), (114.07254387662225,31.115897659320044,4,2,95.01), (114.07262661988271,31.116974516328273,4,2,82.37), (114.07276751964461,31.118245819623972,4,2,120.0), (114.07295169549386,31.119585264518573,4,2,112.25), (114.0731455118892,31.120787955562736,4,2,106.27), (114.07333359027282,31.121955011039386,4,2,93.25), (114.07351736598625,31.123095339790854,4,2,109.11), (114.07374038552415,31.124430741157305,4,2,108.81), (114.07392959779801,31.125561334438697,4,2,114.93)]";





        // 解析点数据
        List<Point> points = parsePoints(pointsData);

        // 生成GeoJSON
        String geoJSON = generateGeoJSON(points);

        // 保存GeoJSON到文件
        String outputPath = "D:\\learn\\codes\\a_idea_codes\\flinkTest\\src\\main\\java\\whu\\edu\\moniData\\tests\\trajectory_points.geojson";
        saveToFile(geoJSON, outputPath);

        System.out.println("GeoJSON已成功保存至: " + outputPath);
    }

    // 点对象表示法
    static class Point {
        double longitude;
        double latitude;
        int lane;
        int direction;
        double speed;

        Point(double longitude, double latitude, int lane, int direction, double speed) {
            this.longitude = longitude;
            this.latitude = latitude;
            this.lane = lane;
            this.direction = direction;
            this.speed = speed;
        }
    }

    // 文件保存方法
    private static void saveToFile(String content, String filePath) {
        try {
            // 创建文件路径
            Path path = Paths.get(filePath);

            // 确保父目录存在
            File parentDir = path.getParent().toFile();
            if (!parentDir.exists()) {
                parentDir.mkdirs();
            }

            // 写入文件
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            writer.write(content);
            writer.close();
            System.out.println("文件保存成功: " + filePath);
        } catch (IOException e) {
            System.err.println("写入文件失败: " + e.getMessage());
            e.printStackTrace();
        }
    }

    // 解析点数据
    private static List<Point> parsePoints(String pointsData) {
        List<Point> points = new ArrayList<>();

        // 找到第一个数字出现的位置
        int start = 0;
        while (start < pointsData.length() &&
                !Character.isDigit(pointsData.charAt(start)) &&
                pointsData.charAt(start) != '-') {
            start++;
        }

        // 找到最后一个数字结束的位置
        int end = pointsData.length() - 1;
        while (end >= 0 &&
                !Character.isDigit(pointsData.charAt(end)) &&
                pointsData.charAt(end) != '.') {
            end--;
        }

        // 提取数据部分
        String cleanData = pointsData.substring(start, end + 1);

        // 分割成独立点
        String[] pointStrings = cleanData.split("\\),\\s*\\(");

        for (String pointStr : pointStrings) {
            // 清理每个点的字符串
            pointStr = pointStr.replace("(", "").replace(")", "").trim();

            // 处理像"极.05589373387494"这样的异常
            if (pointStr.startsWith("极")) {
                pointStr = "114" + pointStr.substring(1);
            } else if (pointStr.contains(",极.")) {
                pointStr = pointStr.replace(",极.", ",114.");
            }

            String[] components = pointStr.split(",");

            // 确保有5个组成部分
            if (components.length == 5) {
                try {
                    double longitude = parseDoubleSafe(components[0]);
                    double latitude = parseDoubleSafe(components[1]);
                    int lane = parseIntSafe(components[2]);
                    int direction = parseIntSafe(components[3]);
                    double speed = parseDoubleSafe(components[4]);

                    points.add(new Point(longitude, latitude, lane, direction, speed));
                } catch (NumberFormatException e) {
                    System.err.println("解析点失败: " + pointStr);
                }
            } else {
                System.err.println("无效点格式: " + pointStr);
            }
        }

        return points;
    }

    // 安全解析浮点数
    private static double parseDoubleSafe(String s) {
        try {
            return Double.parseDouble(s.trim());
        } catch (NumberFormatException e) {
            // 尝试清理常见的非法字符
            String clean = s.replaceAll("[^0-9.-]", "");
            return clean.isEmpty() ? 0.0 : Double.parseDouble(clean);
        }
    }

    // 安全解析整数
    private static int parseIntSafe(String s) {
        try {
            return Integer.parseInt(s.trim());
        } catch (NumberFormatException e) {
            // 尝试清理常见的非法字符
            String clean = s.replaceAll("[^0-9-]", "");
            return clean.isEmpty() ? 0 : Integer.parseInt(clean);
        }
    }

    // 生成GeoJSON
    private static String generateGeoJSON(List<Point> points) {
        JSONObject featureCollection = new JSONObject();
        featureCollection.put("type", "FeatureCollection");

        JSONArray features = new JSONArray();

        // 为每个点创建一个feature
        for (int i = 0; i < points.size(); i++) {
            Point point = points.get(i);

            JSONObject feature = new JSONObject();
            feature.put("type", "Feature");

            // 几何体
            JSONObject geometry = new JSONObject();
            geometry.put("type", "Point");
            JSONArray coordinates = new JSONArray();
            coordinates.put(point.longitude);
            coordinates.put(point.latitude);
            geometry.put("coordinates", coordinates);
            feature.put("geometry", geometry);

            // 属性
            JSONObject properties = new JSONObject();
            properties.put("id", i);
            properties.put("sequence", i);
            properties.put("lane", point.lane);
            properties.put("direction", point.direction);
            properties.put("speed", point.speed);
            feature.put("properties", properties);

            features.put(feature);
        }

        featureCollection.put("features", features);
        return featureCollection.toString(2); // 使用缩进提高可读性
    }
}